->CREAR PACKAGE.JSON
npm init -y 
->GIT
git init
crear gitignore
pushear al repositorio
->INSTALAR DEPENDENCIAS
npm i -S graphql-yoga
npm i -D @babel/core @babel/cli @babel/preset-env
npm i -S cross-env
->CONFIGURAR BABEL
crear .babelrc y config
{
    "presets": ["@babel/preset-env"]
}
->AGREGAR NODEMON
npm i -D nodemon
crear nodemon.json y config
{
    "exec": "npm run dev",
    "watch": ["src/**"],
    "ext": "js, graphql" 
}
->INSTALAR HERRAMIENTAS
npm i -D rimraf
npm i -D npm-run-all
->CONFIGURAR PACKAGE.JSON
borrar script
agregar
->INICIAR graphql
crear src y main.js
crear schema.graphql
deployar con npm run watch:dev
->GENERADOR DE ID
npm i -S uuid
->AGREGAR SUBSCRIPTION
agregar PubSub al ctx
crear Subscription.js en el resolver
->BD
instalar postgres
instalar docker
instalar dbeaver
en docker 
docker pull postgres
crear contenedor: docker run --name jcbookstore -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres
crear bd y el script
instalar prisma npm i -D @prisma/cli
instalar npx prisma2 init
configurar el.env
inspeccionar la bd con npx prisma2 introspect
se actualizará schema.prisma borrando campos no obligatorios "?"
instalar Prisma client npm i -S @prisma/client
conectar con la bd npx prisma2 generate
agregar prisma al ctx en main.js
configurar queries, mutations y Subscriptions(en mutations)
configurar cada type en sus resolvers
conectar con la bd npx prisma2 introspect  y npx prisma2 generate para los cambios
instalar puglin de babel para el async npm i -D @babel/plugin-transform-runtime
agregar dependencia a babel
{
    "presets": ["@babel/preset-env"],
    "plugins": [
        [
            "@babel/plugin-transform-runtime",
            {
                "regenerator": true
            }
        ]
    ]
}
->AUTHENTICATION
agregar token generator y encriptador npm i -S jsonwebtoken bcrypt
agregar columna password a los users
informar los cambios a prisma2
npx prisma2 introspect
npx prisma2 generate
agregar carpeta utils
y su index.js y configurarlo
import jsw from 'jsonwebtoken'
import bcrypt from 'bcrypt'

const SECRET = 'jc'

export const getUserId = () => {
    return  'Hellow world'
}

export const hashPassword = async password =>{/* hash de contraseña */
    if(password.lenght<6){
        throw new Error('Password must be have at least 6 characters')
    }
    const salt = await bcrypt.genSalt(10)
    return bcrypt.hash(password, salt)
}

export const validatePassword = async (requestPassword, password) => {/* validación */
    return await bcrypt.compare(requestPassword,password)
}

export const generateToken = (userId) => {
    return jsw.sign({userId},SECRET,{ expiresIn:'3 days'})
}

ir a main.js
configurar ctx
ir al schema y configurar con el password
agregar cambios al mutation.js
cambiar signUp
agregar login al schema y al mutations
agregar validación a los queries y en los demás resolvers

->DEPLOYMENT
crear dockerfile
FROM smartroadsense/postgres-cli:lastest

COPY script.sql script.sql

ENTRYPOINT psql -h ${DB_HOST} -d ${DB_NAME} -U ${DB_USER} -f script.sql

modificar main.js